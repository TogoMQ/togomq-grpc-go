// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mq/v1/mq.proto

package mqv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/TogoMQ/togomq-grpc-go/mq/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MqServiceName is the fully-qualified name of the MqService service.
	MqServiceName = "mq.v1.MqService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MqServicePubMessageProcedure is the fully-qualified name of the MqService's PubMessage RPC.
	MqServicePubMessageProcedure = "/mq.v1.MqService/PubMessage"
	// MqServiceSubMessageProcedure is the fully-qualified name of the MqService's SubMessage RPC.
	MqServiceSubMessageProcedure = "/mq.v1.MqService/SubMessage"
	// MqServiceCountMessagesProcedure is the fully-qualified name of the MqService's CountMessages RPC.
	MqServiceCountMessagesProcedure = "/mq.v1.MqService/CountMessages"
	// MqServiceHealthCheckProcedure is the fully-qualified name of the MqService's HealthCheck RPC.
	MqServiceHealthCheckProcedure = "/mq.v1.MqService/HealthCheck"
)

// MqServiceClient is a client for the mq.v1.MqService service.
type MqServiceClient interface {
	PubMessage(context.Context) *connect.ClientStreamForClient[v1.PubMessageRequest, v1.PubMessageResponse]
	SubMessage(context.Context, *connect.Request[v1.SubMessageRequest]) (*connect.ServerStreamForClient[v1.SubMessageResponse], error)
	CountMessages(context.Context, *connect.Request[v1.CountMessagesRequest]) (*connect.Response[v1.CountMessagesResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewMqServiceClient constructs a client for the mq.v1.MqService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMqServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MqServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mqServiceMethods := v1.File_mq_v1_mq_proto.Services().ByName("MqService").Methods()
	return &mqServiceClient{
		pubMessage: connect.NewClient[v1.PubMessageRequest, v1.PubMessageResponse](
			httpClient,
			baseURL+MqServicePubMessageProcedure,
			connect.WithSchema(mqServiceMethods.ByName("PubMessage")),
			connect.WithClientOptions(opts...),
		),
		subMessage: connect.NewClient[v1.SubMessageRequest, v1.SubMessageResponse](
			httpClient,
			baseURL+MqServiceSubMessageProcedure,
			connect.WithSchema(mqServiceMethods.ByName("SubMessage")),
			connect.WithClientOptions(opts...),
		),
		countMessages: connect.NewClient[v1.CountMessagesRequest, v1.CountMessagesResponse](
			httpClient,
			baseURL+MqServiceCountMessagesProcedure,
			connect.WithSchema(mqServiceMethods.ByName("CountMessages")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+MqServiceHealthCheckProcedure,
			connect.WithSchema(mqServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mqServiceClient implements MqServiceClient.
type mqServiceClient struct {
	pubMessage    *connect.Client[v1.PubMessageRequest, v1.PubMessageResponse]
	subMessage    *connect.Client[v1.SubMessageRequest, v1.SubMessageResponse]
	countMessages *connect.Client[v1.CountMessagesRequest, v1.CountMessagesResponse]
	healthCheck   *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// PubMessage calls mq.v1.MqService.PubMessage.
func (c *mqServiceClient) PubMessage(ctx context.Context) *connect.ClientStreamForClient[v1.PubMessageRequest, v1.PubMessageResponse] {
	return c.pubMessage.CallClientStream(ctx)
}

// SubMessage calls mq.v1.MqService.SubMessage.
func (c *mqServiceClient) SubMessage(ctx context.Context, req *connect.Request[v1.SubMessageRequest]) (*connect.ServerStreamForClient[v1.SubMessageResponse], error) {
	return c.subMessage.CallServerStream(ctx, req)
}

// CountMessages calls mq.v1.MqService.CountMessages.
func (c *mqServiceClient) CountMessages(ctx context.Context, req *connect.Request[v1.CountMessagesRequest]) (*connect.Response[v1.CountMessagesResponse], error) {
	return c.countMessages.CallUnary(ctx, req)
}

// HealthCheck calls mq.v1.MqService.HealthCheck.
func (c *mqServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// MqServiceHandler is an implementation of the mq.v1.MqService service.
type MqServiceHandler interface {
	PubMessage(context.Context, *connect.ClientStream[v1.PubMessageRequest]) (*connect.Response[v1.PubMessageResponse], error)
	SubMessage(context.Context, *connect.Request[v1.SubMessageRequest], *connect.ServerStream[v1.SubMessageResponse]) error
	CountMessages(context.Context, *connect.Request[v1.CountMessagesRequest]) (*connect.Response[v1.CountMessagesResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewMqServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMqServiceHandler(svc MqServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mqServiceMethods := v1.File_mq_v1_mq_proto.Services().ByName("MqService").Methods()
	mqServicePubMessageHandler := connect.NewClientStreamHandler(
		MqServicePubMessageProcedure,
		svc.PubMessage,
		connect.WithSchema(mqServiceMethods.ByName("PubMessage")),
		connect.WithHandlerOptions(opts...),
	)
	mqServiceSubMessageHandler := connect.NewServerStreamHandler(
		MqServiceSubMessageProcedure,
		svc.SubMessage,
		connect.WithSchema(mqServiceMethods.ByName("SubMessage")),
		connect.WithHandlerOptions(opts...),
	)
	mqServiceCountMessagesHandler := connect.NewUnaryHandler(
		MqServiceCountMessagesProcedure,
		svc.CountMessages,
		connect.WithSchema(mqServiceMethods.ByName("CountMessages")),
		connect.WithHandlerOptions(opts...),
	)
	mqServiceHealthCheckHandler := connect.NewUnaryHandler(
		MqServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(mqServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mq.v1.MqService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MqServicePubMessageProcedure:
			mqServicePubMessageHandler.ServeHTTP(w, r)
		case MqServiceSubMessageProcedure:
			mqServiceSubMessageHandler.ServeHTTP(w, r)
		case MqServiceCountMessagesProcedure:
			mqServiceCountMessagesHandler.ServeHTTP(w, r)
		case MqServiceHealthCheckProcedure:
			mqServiceHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMqServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMqServiceHandler struct{}

func (UnimplementedMqServiceHandler) PubMessage(context.Context, *connect.ClientStream[v1.PubMessageRequest]) (*connect.Response[v1.PubMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mq.v1.MqService.PubMessage is not implemented"))
}

func (UnimplementedMqServiceHandler) SubMessage(context.Context, *connect.Request[v1.SubMessageRequest], *connect.ServerStream[v1.SubMessageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mq.v1.MqService.SubMessage is not implemented"))
}

func (UnimplementedMqServiceHandler) CountMessages(context.Context, *connect.Request[v1.CountMessagesRequest]) (*connect.Response[v1.CountMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mq.v1.MqService.CountMessages is not implemented"))
}

func (UnimplementedMqServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mq.v1.MqService.HealthCheck is not implemented"))
}
