// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mq/v1/mq.proto

package mqv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MqService_PubMessage_FullMethodName    = "/mq.v1.MqService/PubMessage"
	MqService_SubMessage_FullMethodName    = "/mq.v1.MqService/SubMessage"
	MqService_CountMessages_FullMethodName = "/mq.v1.MqService/CountMessages"
	MqService_HealthCheck_FullMethodName   = "/mq.v1.MqService/HealthCheck"
)

// MqServiceClient is the client API for MqService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqServiceClient interface {
	PubMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PubMessageRequest, PubMessageResponse], error)
	SubMessage(ctx context.Context, in *SubMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubMessageResponse], error)
	CountMessages(ctx context.Context, in *CountMessagesRequest, opts ...grpc.CallOption) (*CountMessagesResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type mqServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqServiceClient(cc grpc.ClientConnInterface) MqServiceClient {
	return &mqServiceClient{cc}
}

func (c *mqServiceClient) PubMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PubMessageRequest, PubMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MqService_ServiceDesc.Streams[0], MqService_PubMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PubMessageRequest, PubMessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MqService_PubMessageClient = grpc.ClientStreamingClient[PubMessageRequest, PubMessageResponse]

func (c *mqServiceClient) SubMessage(ctx context.Context, in *SubMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MqService_ServiceDesc.Streams[1], MqService_SubMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubMessageRequest, SubMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MqService_SubMessageClient = grpc.ServerStreamingClient[SubMessageResponse]

func (c *mqServiceClient) CountMessages(ctx context.Context, in *CountMessagesRequest, opts ...grpc.CallOption) (*CountMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountMessagesResponse)
	err := c.cc.Invoke(ctx, MqService_CountMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MqService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqServiceServer is the server API for MqService service.
// All implementations must embed UnimplementedMqServiceServer
// for forward compatibility.
type MqServiceServer interface {
	PubMessage(grpc.ClientStreamingServer[PubMessageRequest, PubMessageResponse]) error
	SubMessage(*SubMessageRequest, grpc.ServerStreamingServer[SubMessageResponse]) error
	CountMessages(context.Context, *CountMessagesRequest) (*CountMessagesResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedMqServiceServer()
}

// UnimplementedMqServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMqServiceServer struct{}

func (UnimplementedMqServiceServer) PubMessage(grpc.ClientStreamingServer[PubMessageRequest, PubMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PubMessage not implemented")
}
func (UnimplementedMqServiceServer) SubMessage(*SubMessageRequest, grpc.ServerStreamingServer[SubMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubMessage not implemented")
}
func (UnimplementedMqServiceServer) CountMessages(context.Context, *CountMessagesRequest) (*CountMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMessages not implemented")
}
func (UnimplementedMqServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMqServiceServer) mustEmbedUnimplementedMqServiceServer() {}
func (UnimplementedMqServiceServer) testEmbeddedByValue()                   {}

// UnsafeMqServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqServiceServer will
// result in compilation errors.
type UnsafeMqServiceServer interface {
	mustEmbedUnimplementedMqServiceServer()
}

func RegisterMqServiceServer(s grpc.ServiceRegistrar, srv MqServiceServer) {
	// If the following call pancis, it indicates UnimplementedMqServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MqService_ServiceDesc, srv)
}

func _MqService_PubMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MqServiceServer).PubMessage(&grpc.GenericServerStream[PubMessageRequest, PubMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MqService_PubMessageServer = grpc.ClientStreamingServer[PubMessageRequest, PubMessageResponse]

func _MqService_SubMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MqServiceServer).SubMessage(m, &grpc.GenericServerStream[SubMessageRequest, SubMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MqService_SubMessageServer = grpc.ServerStreamingServer[SubMessageResponse]

func _MqService_CountMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServiceServer).CountMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MqService_CountMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServiceServer).CountMessages(ctx, req.(*CountMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MqService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MqService_ServiceDesc is the grpc.ServiceDesc for MqService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq.v1.MqService",
	HandlerType: (*MqServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountMessages",
			Handler:    _MqService_CountMessages_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MqService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubMessage",
			Handler:       _MqService_PubMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubMessage",
			Handler:       _MqService_SubMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mq/v1/mq.proto",
}
